// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Artist {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  bio       String?
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  songs     Song[]
}

model Chord {
  id          Int             @id @default(autoincrement())
  name        String          @unique
  positions   String          // JSON string of fret positions
  fingers     String          // JSON string of finger positions
  description String?
  difficulty  ChordDifficulty @default(EASY)
  tips        String?         // JSON string of tips array
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  songChords  SongChord[]
}

model Song {
  id              Int         @id @default(autoincrement())
  title           String
  artistId        Int
  lyrics          String
  tempo           Int         @default(120)
  genre           String?
  difficulty      Difficulty  @default(BEGINNER)
  chordProgression String?    // Main chord progression (e.g., "I-vi-IV-V")
  key             String?     // Musical key (e.g., "C", "Am")
  capo            Int?        // Capo position
  strummingPattern String?    // Strumming pattern description
  duration        Int?        // Duration in seconds
  isPublic        Boolean     @default(true)
  playCount       Int         @default(0)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  artist         Artist       @relation(fields: [artistId], references: [id])
  songChords     SongChord[]
  userSongs      UserSong[]
  
  @@index([artistId])
  @@index([genre])
  @@index([difficulty])
}

model SongChord {
  id       Int @id @default(autoincrement())
  songId   Int
  chordId  Int
  position Int // Position in the song (line number or measure)
  line     Int // Line number in lyrics
  
  song  Song  @relation(fields: [songId], references: [id], onDelete: Cascade)
  chord Chord @relation(fields: [chordId], references: [id])
  
  @@unique([songId, chordId, position, line])
  @@index([songId])
}

model User {
  id            Int        @id @default(autoincrement())
  email         String     @unique
  name          String?
  passwordHash  String
  isActive      Boolean    @default(true)
  preferences   String?    // JSON string of user preferences
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  
  userSongs     UserSong[]
}

model UserSong {
  id            Int      @id @default(autoincrement())
  userId        Int
  songId        Int
  isFavorite    Boolean  @default(false)
  playCount     Int      @default(0)
  lastPlayedAt  DateTime?
  practiceTime  Int      @default(0) // Total practice time in seconds
  mastery       Mastery  @default(LEARNING)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  song Song @relation(fields: [songId], references: [id], onDelete: Cascade)
  
  @@unique([userId, songId])
  @@index([userId])
  @@index([lastPlayedAt])
}

enum ChordDifficulty {
  EASY
  MEDIUM
  HARD
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum Mastery {
  LEARNING
  PRACTICING
  COMFORTABLE
  MASTERED
}
